// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPrivateAddToAddressBook adds new entry to address book of given type
*/
func (a *Client) GetPrivateAddToAddressBook(params *GetPrivateAddToAddressBookParams) (*GetPrivateAddToAddressBookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateAddToAddressBookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateAddToAddressBook",
		Method:             "GET",
		PathPattern:        "/private/add_to_address_book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateAddToAddressBookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateAddToAddressBookOK), nil

}

/*
GetPrivateBuy places a buy order for an instrument
*/
func (a *Client) GetPrivateBuy(params *GetPrivateBuyParams) (*GetPrivateBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateBuyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateBuy",
		Method:             "GET",
		PathPattern:        "/private/buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateBuyOK), nil

}

/*
GetPrivateCancel cancels an order specified by order id
*/
func (a *Client) GetPrivateCancel(params *GetPrivateCancelParams) (*GetPrivateCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancel",
		Method:             "GET",
		PathPattern:        "/private/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelOK), nil

}

/*
GetPrivateCancelAll this method cancels all users orders and stop orders within all currencies and instrument kinds
*/
func (a *Client) GetPrivateCancelAll(params *GetPrivateCancelAllParams) (*GetPrivateCancelAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAll",
		Method:             "GET",
		PathPattern:        "/private/cancel_all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelAllOK), nil

}

/*
GetPrivateCancelAllByCurrency cancels all orders by currency optionally filtered by instrument kind and or order type
*/
func (a *Client) GetPrivateCancelAllByCurrency(params *GetPrivateCancelAllByCurrencyParams) (*GetPrivateCancelAllByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAllByCurrency",
		Method:             "GET",
		PathPattern:        "/private/cancel_all_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelAllByCurrencyOK), nil

}

/*
GetPrivateCancelAllByInstrument cancels all orders by instrument optionally filtered by order type
*/
func (a *Client) GetPrivateCancelAllByInstrument(params *GetPrivateCancelAllByInstrumentParams) (*GetPrivateCancelAllByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAllByInstrument",
		Method:             "GET",
		PathPattern:        "/private/cancel_all_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelAllByInstrumentOK), nil

}

/*
GetPrivateCancelTransferByID cancels transfer
*/
func (a *Client) GetPrivateCancelTransferByID(params *GetPrivateCancelTransferByIDParams) (*GetPrivateCancelTransferByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelTransferByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelTransferByID",
		Method:             "GET",
		PathPattern:        "/private/cancel_transfer_by_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelTransferByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelTransferByIDOK), nil

}

/*
GetPrivateCancelWithdrawal cancels withdrawal request
*/
func (a *Client) GetPrivateCancelWithdrawal(params *GetPrivateCancelWithdrawalParams) (*GetPrivateCancelWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelWithdrawal",
		Method:             "GET",
		PathPattern:        "/private/cancel_withdrawal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCancelWithdrawalOK), nil

}

/*
GetPrivateChangeSubaccountName changes the user name for a subaccount
*/
func (a *Client) GetPrivateChangeSubaccountName(params *GetPrivateChangeSubaccountNameParams) (*GetPrivateChangeSubaccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateChangeSubaccountNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateChangeSubaccountName",
		Method:             "GET",
		PathPattern:        "/private/change_subaccount_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateChangeSubaccountNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateChangeSubaccountNameOK), nil

}

/*
GetPrivateClosePosition makes closing position reduce only order
*/
func (a *Client) GetPrivateClosePosition(params *GetPrivateClosePositionParams) (*GetPrivateClosePositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateClosePositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateClosePosition",
		Method:             "GET",
		PathPattern:        "/private/close_position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateClosePositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateClosePositionOK), nil

}

/*
GetPrivateCreateDepositAddress creates deposit address in currency
*/
func (a *Client) GetPrivateCreateDepositAddress(params *GetPrivateCreateDepositAddressParams) (*GetPrivateCreateDepositAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCreateDepositAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCreateDepositAddress",
		Method:             "GET",
		PathPattern:        "/private/create_deposit_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCreateDepositAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCreateDepositAddressOK), nil

}

/*
GetPrivateCreateSubaccount creates a new subaccount
*/
func (a *Client) GetPrivateCreateSubaccount(params *GetPrivateCreateSubaccountParams) (*GetPrivateCreateSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCreateSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCreateSubaccount",
		Method:             "GET",
		PathPattern:        "/private/create_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCreateSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateCreateSubaccountOK), nil

}

/*
GetPrivateDatatable this is a private API endpoint intended for the user interface this API is subject to change and should not be used outside the deribit interface
*/
func (a *Client) GetPrivateDatatable(params *GetPrivateDatatableParams) (*GetPrivateDatatableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateDatatableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateDatatable",
		Method:             "GET",
		PathPattern:        "/private/datatable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateDatatableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateDatatableOK), nil

}

/*
GetPrivateDisableCancelOnDisconnect disables cancel on disconnect for the connection this does not change the default account setting
*/
func (a *Client) GetPrivateDisableCancelOnDisconnect(params *GetPrivateDisableCancelOnDisconnectParams) (*GetPrivateDisableCancelOnDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateDisableCancelOnDisconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateDisableCancelOnDisconnect",
		Method:             "GET",
		PathPattern:        "/private/disable_cancel_on_disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateDisableCancelOnDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateDisableCancelOnDisconnectOK), nil

}

/*
GetPrivateDisableTfaForSubaccount disables two factor authentication for a subaccount
*/
func (a *Client) GetPrivateDisableTfaForSubaccount(params *GetPrivateDisableTfaForSubaccountParams) (*GetPrivateDisableTfaForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateDisableTfaForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateDisableTfaForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/disable_tfa_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateDisableTfaForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateDisableTfaForSubaccountOK), nil

}

/*
GetPrivateEdit changes price amount and or other properties of an order
*/
func (a *Client) GetPrivateEdit(params *GetPrivateEditParams) (*GetPrivateEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateEdit",
		Method:             "GET",
		PathPattern:        "/private/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateEditReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateEditOK), nil

}

/*
GetPrivateEnableCancelOnDisconnect enables cancel on disconnect for the connection this does not change the default account setting
*/
func (a *Client) GetPrivateEnableCancelOnDisconnect(params *GetPrivateEnableCancelOnDisconnectParams) (*GetPrivateEnableCancelOnDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateEnableCancelOnDisconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateEnableCancelOnDisconnect",
		Method:             "GET",
		PathPattern:        "/private/enable_cancel_on_disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateEnableCancelOnDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateEnableCancelOnDisconnectOK), nil

}

/*
GetPrivateGetAccountSummary retrieves user account summary
*/
func (a *Client) GetPrivateGetAccountSummary(params *GetPrivateGetAccountSummaryParams) (*GetPrivateGetAccountSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetAccountSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetAccountSummary",
		Method:             "GET",
		PathPattern:        "/private/get_account_summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetAccountSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetAccountSummaryOK), nil

}

/*
GetPrivateGetAddressBook retrieves address book of given type
*/
func (a *Client) GetPrivateGetAddressBook(params *GetPrivateGetAddressBookParams) (*GetPrivateGetAddressBookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetAddressBookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetAddressBook",
		Method:             "GET",
		PathPattern:        "/private/get_address_book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetAddressBookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetAddressBookOK), nil

}

/*
GetPrivateGetCurrentDepositAddress retrieves deposit address for currency
*/
func (a *Client) GetPrivateGetCurrentDepositAddress(params *GetPrivateGetCurrentDepositAddressParams) (*GetPrivateGetCurrentDepositAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetCurrentDepositAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetCurrentDepositAddress",
		Method:             "GET",
		PathPattern:        "/private/get_current_deposit_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetCurrentDepositAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetCurrentDepositAddressOK), nil

}

/*
GetPrivateGetDeposits retrieves the latest users deposits
*/
func (a *Client) GetPrivateGetDeposits(params *GetPrivateGetDepositsParams) (*GetPrivateGetDepositsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetDepositsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetDeposits",
		Method:             "GET",
		PathPattern:        "/private/get_deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetDepositsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetDepositsOK), nil

}

/*
GetPrivateGetEmailLanguage retrieves the language to be used for emails
*/
func (a *Client) GetPrivateGetEmailLanguage(params *GetPrivateGetEmailLanguageParams) (*GetPrivateGetEmailLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetEmailLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetEmailLanguage",
		Method:             "GET",
		PathPattern:        "/private/get_email_language",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetEmailLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetEmailLanguageOK), nil

}

/*
GetPrivateGetMargins gets margins for given instrument amount and price
*/
func (a *Client) GetPrivateGetMargins(params *GetPrivateGetMarginsParams) (*GetPrivateGetMarginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetMarginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetMargins",
		Method:             "GET",
		PathPattern:        "/private/get_margins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetMarginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetMarginsOK), nil

}

/*
GetPrivateGetNewAnnouncements retrieves announcements that have not been marked read by the user
*/
func (a *Client) GetPrivateGetNewAnnouncements(params *GetPrivateGetNewAnnouncementsParams) (*GetPrivateGetNewAnnouncementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetNewAnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetNewAnnouncements",
		Method:             "GET",
		PathPattern:        "/private/get_new_announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetNewAnnouncementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetNewAnnouncementsOK), nil

}

/*
GetPrivateGetOpenOrdersByCurrency retrieves list of user s open orders
*/
func (a *Client) GetPrivateGetOpenOrdersByCurrency(params *GetPrivateGetOpenOrdersByCurrencyParams) (*GetPrivateGetOpenOrdersByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOpenOrdersByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOpenOrdersByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_open_orders_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOpenOrdersByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOpenOrdersByCurrencyOK), nil

}

/*
GetPrivateGetOpenOrdersByInstrument retrieves list of user s open orders within given instrument
*/
func (a *Client) GetPrivateGetOpenOrdersByInstrument(params *GetPrivateGetOpenOrdersByInstrumentParams) (*GetPrivateGetOpenOrdersByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOpenOrdersByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOpenOrdersByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_open_orders_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOpenOrdersByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOpenOrdersByInstrumentOK), nil

}

/*
GetPrivateGetOrderHistoryByCurrency retrieves history of orders that have been partially or fully filled
*/
func (a *Client) GetPrivateGetOrderHistoryByCurrency(params *GetPrivateGetOrderHistoryByCurrencyParams) (*GetPrivateGetOrderHistoryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderHistoryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderHistoryByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_order_history_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderHistoryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOrderHistoryByCurrencyOK), nil

}

/*
GetPrivateGetOrderHistoryByInstrument retrieves history of orders that have been partially or fully filled
*/
func (a *Client) GetPrivateGetOrderHistoryByInstrument(params *GetPrivateGetOrderHistoryByInstrumentParams) (*GetPrivateGetOrderHistoryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderHistoryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderHistoryByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_order_history_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderHistoryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOrderHistoryByInstrumentOK), nil

}

/*
GetPrivateGetOrderMarginByIds retrieves initial margins of given orders
*/
func (a *Client) GetPrivateGetOrderMarginByIds(params *GetPrivateGetOrderMarginByIdsParams) (*GetPrivateGetOrderMarginByIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderMarginByIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderMarginByIds",
		Method:             "GET",
		PathPattern:        "/private/get_order_margin_by_ids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderMarginByIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOrderMarginByIdsOK), nil

}

/*
GetPrivateGetOrderState retrieves the current state of an order
*/
func (a *Client) GetPrivateGetOrderState(params *GetPrivateGetOrderStateParams) (*GetPrivateGetOrderStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderState",
		Method:             "GET",
		PathPattern:        "/private/get_order_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetOrderStateOK), nil

}

/*
GetPrivateGetPosition retrieves user position
*/
func (a *Client) GetPrivateGetPosition(params *GetPrivateGetPositionParams) (*GetPrivateGetPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetPosition",
		Method:             "GET",
		PathPattern:        "/private/get_position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetPositionOK), nil

}

/*
GetPrivateGetPositions retrieves user positions
*/
func (a *Client) GetPrivateGetPositions(params *GetPrivateGetPositionsParams) (*GetPrivateGetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetPositions",
		Method:             "GET",
		PathPattern:        "/private/get_positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetPositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetPositionsOK), nil

}

/*
GetPrivateGetSettlementHistoryByCurrency retrieves settlement delivery and bankruptcy events that have affected your account
*/
func (a *Client) GetPrivateGetSettlementHistoryByCurrency(params *GetPrivateGetSettlementHistoryByCurrencyParams) (*GetPrivateGetSettlementHistoryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSettlementHistoryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSettlementHistoryByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_settlement_history_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSettlementHistoryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetSettlementHistoryByCurrencyOK), nil

}

/*
GetPrivateGetSettlementHistoryByInstrument retrieves public settlement delivery and bankruptcy events filtered by instrument name
*/
func (a *Client) GetPrivateGetSettlementHistoryByInstrument(params *GetPrivateGetSettlementHistoryByInstrumentParams) (*GetPrivateGetSettlementHistoryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSettlementHistoryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSettlementHistoryByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_settlement_history_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSettlementHistoryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetSettlementHistoryByInstrumentOK), nil

}

/*
GetPrivateGetSubaccounts gets information about subaccounts
*/
func (a *Client) GetPrivateGetSubaccounts(params *GetPrivateGetSubaccountsParams) (*GetPrivateGetSubaccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSubaccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSubaccounts",
		Method:             "GET",
		PathPattern:        "/private/get_subaccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSubaccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetSubaccountsOK), nil

}

/*
GetPrivateGetTransfers adds new entry to address book of given type
*/
func (a *Client) GetPrivateGetTransfers(params *GetPrivateGetTransfersParams) (*GetPrivateGetTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetTransfersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetTransfers",
		Method:             "GET",
		PathPattern:        "/private/get_transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetTransfersOK), nil

}

/*
GetPrivateGetUserTradesByCurrency retrieves the latest user trades that have occurred for instruments in a specific currency symbol
*/
func (a *Client) GetPrivateGetUserTradesByCurrency(params *GetPrivateGetUserTradesByCurrencyParams) (*GetPrivateGetUserTradesByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetUserTradesByCurrencyOK), nil

}

/*
GetPrivateGetUserTradesByCurrencyAndTime retrieves the latest user trades that have occurred for instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPrivateGetUserTradesByCurrencyAndTime(params *GetPrivateGetUserTradesByCurrencyAndTimeParams) (*GetPrivateGetUserTradesByCurrencyAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByCurrencyAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByCurrencyAndTime",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_currency_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByCurrencyAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetUserTradesByCurrencyAndTimeOK), nil

}

/*
GetPrivateGetUserTradesByInstrument retrieves the latest user trades that have occurred for a specific instrument
*/
func (a *Client) GetPrivateGetUserTradesByInstrument(params *GetPrivateGetUserTradesByInstrumentParams) (*GetPrivateGetUserTradesByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetUserTradesByInstrumentOK), nil

}

/*
GetPrivateGetUserTradesByInstrumentAndTime retrieves the latest user trades that have occurred for a specific instrument and within given time range
*/
func (a *Client) GetPrivateGetUserTradesByInstrumentAndTime(params *GetPrivateGetUserTradesByInstrumentAndTimeParams) (*GetPrivateGetUserTradesByInstrumentAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByInstrumentAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByInstrumentAndTime",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_instrument_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByInstrumentAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetUserTradesByInstrumentAndTimeOK), nil

}

/*
GetPrivateGetUserTradesByOrder retrieves the list of user trades that was created for given order
*/
func (a *Client) GetPrivateGetUserTradesByOrder(params *GetPrivateGetUserTradesByOrderParams) (*GetPrivateGetUserTradesByOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByOrder",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetUserTradesByOrderOK), nil

}

/*
GetPrivateGetWithdrawals retrieves the latest users withdrawals
*/
func (a *Client) GetPrivateGetWithdrawals(params *GetPrivateGetWithdrawalsParams) (*GetPrivateGetWithdrawalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetWithdrawalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetWithdrawals",
		Method:             "GET",
		PathPattern:        "/private/get_withdrawals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetWithdrawalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetWithdrawalsOK), nil

}

/*
GetPrivateGetopenorders retrieves open orders this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateGetopenorders(params *GetPrivateGetopenordersParams) (*GetPrivateGetopenordersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetopenordersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetopenorders",
		Method:             "GET",
		PathPattern:        "/private/getopenorders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetopenordersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateGetopenordersOK), nil

}

/*
GetPrivateLogout gracefullies close websocket connection when c o d cancel on disconnect is enabled orders are not cancelled
*/
func (a *Client) GetPrivateLogout(params *GetPrivateLogoutParams) (*GetPrivateLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateLogout",
		Method:             "GET",
		PathPattern:        "/private/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateLogoutOK), nil

}

/*
GetPrivateOrderhistory retrieves history of orders that have been partially or fully filled this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateOrderhistory(params *GetPrivateOrderhistoryParams) (*GetPrivateOrderhistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateOrderhistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateOrderhistory",
		Method:             "GET",
		PathPattern:        "/private/orderhistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateOrderhistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateOrderhistoryOK), nil

}

/*
GetPrivateOrderstate retrieves order details state by order id this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateOrderstate(params *GetPrivateOrderstateParams) (*GetPrivateOrderstateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateOrderstateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateOrderstate",
		Method:             "GET",
		PathPattern:        "/private/orderstate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateOrderstateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateOrderstateOK), nil

}

/*
GetPrivatePositions retrieves current positions this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivatePositions(params *GetPrivatePositionsParams) (*GetPrivatePositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatePositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivatePositions",
		Method:             "GET",
		PathPattern:        "/private/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivatePositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatePositionsOK), nil

}

/*
GetPrivateRemoveFromAddressBook adds new entry to address book of given type
*/
func (a *Client) GetPrivateRemoveFromAddressBook(params *GetPrivateRemoveFromAddressBookParams) (*GetPrivateRemoveFromAddressBookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateRemoveFromAddressBookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateRemoveFromAddressBook",
		Method:             "GET",
		PathPattern:        "/private/remove_from_address_book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateRemoveFromAddressBookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateRemoveFromAddressBookOK), nil

}

/*
GetPrivateSell places a sell order for an instrument
*/
func (a *Client) GetPrivateSell(params *GetPrivateSellParams) (*GetPrivateSellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSellParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSell",
		Method:             "GET",
		PathPattern:        "/private/sell",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSellOK), nil

}

/*
GetPrivateSetAnnouncementAsRead marks an announcement as read so it will not be shown in get new announcements
*/
func (a *Client) GetPrivateSetAnnouncementAsRead(params *GetPrivateSetAnnouncementAsReadParams) (*GetPrivateSetAnnouncementAsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetAnnouncementAsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetAnnouncementAsRead",
		Method:             "GET",
		PathPattern:        "/private/set_announcement_as_read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetAnnouncementAsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSetAnnouncementAsReadOK), nil

}

/*
GetPrivateSetEmailForSubaccount assigns an email address to a subaccount user will receive an email with confirmation link
*/
func (a *Client) GetPrivateSetEmailForSubaccount(params *GetPrivateSetEmailForSubaccountParams) (*GetPrivateSetEmailForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetEmailForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetEmailForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/set_email_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetEmailForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSetEmailForSubaccountOK), nil

}

/*
GetPrivateSetEmailLanguage changes the language to be used for emails
*/
func (a *Client) GetPrivateSetEmailLanguage(params *GetPrivateSetEmailLanguageParams) (*GetPrivateSetEmailLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetEmailLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetEmailLanguage",
		Method:             "GET",
		PathPattern:        "/private/set_email_language",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetEmailLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSetEmailLanguageOK), nil

}

/*
GetPrivateSetPasswordForSubaccount sets the password for the subaccount
*/
func (a *Client) GetPrivateSetPasswordForSubaccount(params *GetPrivateSetPasswordForSubaccountParams) (*GetPrivateSetPasswordForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetPasswordForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetPasswordForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/set_password_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetPasswordForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSetPasswordForSubaccountOK), nil

}

/*
GetPrivateSubmitTransferToSubaccount transfers funds to a subaccount
*/
func (a *Client) GetPrivateSubmitTransferToSubaccount(params *GetPrivateSubmitTransferToSubaccountParams) (*GetPrivateSubmitTransferToSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubmitTransferToSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubmitTransferToSubaccount",
		Method:             "GET",
		PathPattern:        "/private/submit_transfer_to_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubmitTransferToSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSubmitTransferToSubaccountOK), nil

}

/*
GetPrivateSubmitTransferToUser transfers funds to a another user
*/
func (a *Client) GetPrivateSubmitTransferToUser(params *GetPrivateSubmitTransferToUserParams) (*GetPrivateSubmitTransferToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubmitTransferToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubmitTransferToUser",
		Method:             "GET",
		PathPattern:        "/private/submit_transfer_to_user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubmitTransferToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSubmitTransferToUserOK), nil

}

/*
GetPrivateSubscribe subscribes to one or more channels

Subscribe to one or more channels.

The name of the channel determines what information will be provided, and
in what form.

*/
func (a *Client) GetPrivateSubscribe(params *GetPrivateSubscribeParams) (*GetPrivateSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubscribe",
		Method:             "GET",
		PathPattern:        "/private/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSubscribeOK), nil

}

/*
GetPrivateToggleDepositAddressCreation enables or disable deposit address creation
*/
func (a *Client) GetPrivateToggleDepositAddressCreation(params *GetPrivateToggleDepositAddressCreationParams) (*GetPrivateToggleDepositAddressCreationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateToggleDepositAddressCreationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateToggleDepositAddressCreation",
		Method:             "GET",
		PathPattern:        "/private/toggle_deposit_address_creation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateToggleDepositAddressCreationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateToggleDepositAddressCreationOK), nil

}

/*
GetPrivateToggleNotificationsFromSubaccount enables or disable sending of notifications for the subaccount
*/
func (a *Client) GetPrivateToggleNotificationsFromSubaccount(params *GetPrivateToggleNotificationsFromSubaccountParams) (*GetPrivateToggleNotificationsFromSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateToggleNotificationsFromSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateToggleNotificationsFromSubaccount",
		Method:             "GET",
		PathPattern:        "/private/toggle_notifications_from_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateToggleNotificationsFromSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateToggleNotificationsFromSubaccountOK), nil

}

/*
GetPrivateToggleSubaccountLogin enables or disable login for a subaccount if login is disabled and a session for the subaccount exists this session will be terminated
*/
func (a *Client) GetPrivateToggleSubaccountLogin(params *GetPrivateToggleSubaccountLoginParams) (*GetPrivateToggleSubaccountLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateToggleSubaccountLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateToggleSubaccountLogin",
		Method:             "GET",
		PathPattern:        "/private/toggle_subaccount_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateToggleSubaccountLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateToggleSubaccountLoginOK), nil

}

/*
GetPrivateTradehistory retrieves the trade history of the account this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateTradehistory(params *GetPrivateTradehistoryParams) (*GetPrivateTradehistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateTradehistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateTradehistory",
		Method:             "GET",
		PathPattern:        "/private/tradehistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateTradehistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateTradehistoryOK), nil

}

/*
GetPrivateUnsubscribe unsubscribes from one or more channels
*/
func (a *Client) GetPrivateUnsubscribe(params *GetPrivateUnsubscribeParams) (*GetPrivateUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateUnsubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateUnsubscribe",
		Method:             "GET",
		PathPattern:        "/private/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateUnsubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateUnsubscribeOK), nil

}

/*
GetPrivateWithdraw creates a new withdrawal request
*/
func (a *Client) GetPrivateWithdraw(params *GetPrivateWithdrawParams) (*GetPrivateWithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateWithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateWithdraw",
		Method:             "GET",
		PathPattern:        "/private/withdraw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateWithdrawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateWithdrawOK), nil

}

/*
GetPublicAuth authenticates

Retrieve an Oauth access token, to be used for authentication of 'private' requests.

Three methods of authentication are supported:

- <code>password</code> - using email and and password as when logging on to the website
- <code>client_credentials</code> - using the access key and access secret that can be found on the API page on the website
- <code>client_signature</code> - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-deribit-signature-credentials)
- <code>refresh_token</code> - using a refresh token that was received from an earlier invocation

The response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can
be used to get a new set of tokens.

*/
func (a *Client) GetPublicAuth(params *GetPublicAuthParams) (*GetPublicAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicAuth",
		Method:             "GET",
		PathPattern:        "/public/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicAuthOK), nil

}

/*
GetPublicDisableHeartbeat stops sending heartbeat messages
*/
func (a *Client) GetPublicDisableHeartbeat(params *GetPublicDisableHeartbeatParams) (*GetPublicDisableHeartbeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicDisableHeartbeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicDisableHeartbeat",
		Method:             "GET",
		PathPattern:        "/public/disable_heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicDisableHeartbeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicDisableHeartbeatOK), nil

}

/*
GetPublicGetAnnouncements retrieves announcements from the last 30 days
*/
func (a *Client) GetPublicGetAnnouncements(params *GetPublicGetAnnouncementsParams) (*GetPublicGetAnnouncementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetAnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetAnnouncements",
		Method:             "GET",
		PathPattern:        "/public/get_announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetAnnouncementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetAnnouncementsOK), nil

}

/*
GetPublicGetBookSummaryByCurrency retrieves the summary information such as open interest 24h volume etc for all instruments for the currency optionally filtered by kind
*/
func (a *Client) GetPublicGetBookSummaryByCurrency(params *GetPublicGetBookSummaryByCurrencyParams) (*GetPublicGetBookSummaryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetBookSummaryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetBookSummaryByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_book_summary_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetBookSummaryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetBookSummaryByCurrencyOK), nil

}

/*
GetPublicGetBookSummaryByInstrument retrieves the summary information such as open interest 24h volume etc for a specific instrument
*/
func (a *Client) GetPublicGetBookSummaryByInstrument(params *GetPublicGetBookSummaryByInstrumentParams) (*GetPublicGetBookSummaryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetBookSummaryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetBookSummaryByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_book_summary_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetBookSummaryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetBookSummaryByInstrumentOK), nil

}

/*
GetPublicGetContractSize retrieves contract size of provided instrument
*/
func (a *Client) GetPublicGetContractSize(params *GetPublicGetContractSizeParams) (*GetPublicGetContractSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetContractSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetContractSize",
		Method:             "GET",
		PathPattern:        "/public/get_contract_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetContractSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetContractSizeOK), nil

}

/*
GetPublicGetCurrencies retrieves all cryptocurrencies supported by the API
*/
func (a *Client) GetPublicGetCurrencies(params *GetPublicGetCurrenciesParams) (*GetPublicGetCurrenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetCurrenciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetCurrencies",
		Method:             "GET",
		PathPattern:        "/public/get_currencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetCurrenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetCurrenciesOK), nil

}

/*
GetPublicGetFundingChartData retrieves the latest user trades that have occurred for p e r p e t u a l instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPublicGetFundingChartData(params *GetPublicGetFundingChartDataParams) (*GetPublicGetFundingChartDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetFundingChartDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetFundingChartData",
		Method:             "GET",
		PathPattern:        "/public/get_funding_chart_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetFundingChartDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetFundingChartDataOK), nil

}

/*
GetPublicGetHistoricalVolatility provides information about historical volatility for given cryptocurrency
*/
func (a *Client) GetPublicGetHistoricalVolatility(params *GetPublicGetHistoricalVolatilityParams) (*GetPublicGetHistoricalVolatilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetHistoricalVolatilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetHistoricalVolatility",
		Method:             "GET",
		PathPattern:        "/public/get_historical_volatility",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetHistoricalVolatilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetHistoricalVolatilityOK), nil

}

/*
GetPublicGetIndex retrieves the current index price for the instruments for the selected currency
*/
func (a *Client) GetPublicGetIndex(params *GetPublicGetIndexParams) (*GetPublicGetIndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetIndexParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetIndex",
		Method:             "GET",
		PathPattern:        "/public/get_index",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetIndexOK), nil

}

/*
GetPublicGetInstruments retrieves available trading instruments this method can be used to see which instruments are available for trading or which instruments have existed historically
*/
func (a *Client) GetPublicGetInstruments(params *GetPublicGetInstrumentsParams) (*GetPublicGetInstrumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetInstrumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetInstruments",
		Method:             "GET",
		PathPattern:        "/public/get_instruments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetInstrumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetInstrumentsOK), nil

}

/*
GetPublicGetLastSettlementsByCurrency retrieves historical settlement delivery and bankruptcy events coming from all instruments within given currency
*/
func (a *Client) GetPublicGetLastSettlementsByCurrency(params *GetPublicGetLastSettlementsByCurrencyParams) (*GetPublicGetLastSettlementsByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastSettlementsByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastSettlementsByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_last_settlements_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastSettlementsByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastSettlementsByCurrencyOK), nil

}

/*
GetPublicGetLastSettlementsByInstrument retrieves historical public settlement delivery and bankruptcy events filtered by instrument name
*/
func (a *Client) GetPublicGetLastSettlementsByInstrument(params *GetPublicGetLastSettlementsByInstrumentParams) (*GetPublicGetLastSettlementsByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastSettlementsByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastSettlementsByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_last_settlements_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastSettlementsByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastSettlementsByInstrumentOK), nil

}

/*
GetPublicGetLastTradesByCurrency retrieves the latest trades that have occurred for instruments in a specific currency symbol
*/
func (a *Client) GetPublicGetLastTradesByCurrency(params *GetPublicGetLastTradesByCurrencyParams) (*GetPublicGetLastTradesByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastTradesByCurrencyOK), nil

}

/*
GetPublicGetLastTradesByCurrencyAndTime retrieves the latest trades that have occurred for instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPublicGetLastTradesByCurrencyAndTime(params *GetPublicGetLastTradesByCurrencyAndTimeParams) (*GetPublicGetLastTradesByCurrencyAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByCurrencyAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByCurrencyAndTime",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_currency_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByCurrencyAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastTradesByCurrencyAndTimeOK), nil

}

/*
GetPublicGetLastTradesByInstrument retrieves the latest trades that have occurred for a specific instrument
*/
func (a *Client) GetPublicGetLastTradesByInstrument(params *GetPublicGetLastTradesByInstrumentParams) (*GetPublicGetLastTradesByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastTradesByInstrumentOK), nil

}

/*
GetPublicGetLastTradesByInstrumentAndTime retrieves the latest trades that have occurred for a specific instrument and within given time range
*/
func (a *Client) GetPublicGetLastTradesByInstrumentAndTime(params *GetPublicGetLastTradesByInstrumentAndTimeParams) (*GetPublicGetLastTradesByInstrumentAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByInstrumentAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByInstrumentAndTime",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_instrument_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByInstrumentAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetLastTradesByInstrumentAndTimeOK), nil

}

/*
GetPublicGetOrderBook retrieves the order book along with other market values for a given instrument
*/
func (a *Client) GetPublicGetOrderBook(params *GetPublicGetOrderBookParams) (*GetPublicGetOrderBookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetOrderBookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetOrderBook",
		Method:             "GET",
		PathPattern:        "/public/get_order_book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetOrderBookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetOrderBookOK), nil

}

/*
GetPublicGetTime retrieves the current time in milliseconds this API endpoint can be used to check the clock skew between your software and deribit s systems
*/
func (a *Client) GetPublicGetTime(params *GetPublicGetTimeParams) (*GetPublicGetTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetTime",
		Method:             "GET",
		PathPattern:        "/public/get_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetTimeOK), nil

}

/*
GetPublicGetTradeVolumes retrieves aggregated 24h trade volumes for different instrument types and currencies
*/
func (a *Client) GetPublicGetTradeVolumes(params *GetPublicGetTradeVolumesParams) (*GetPublicGetTradeVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetTradeVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetTradeVolumes",
		Method:             "GET",
		PathPattern:        "/public/get_trade_volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetTradeVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetTradeVolumesOK), nil

}

/*
GetPublicGetlasttrades retrieves the latest trades that have occurred for a specific instrument trades are identified in two ways the trade is trade Id which is unique between all instruments but is not guaranteed to be strictly sequential the trade sequence trade seq which starts at 1 for each instruments and is strictly sequential under rare circumstances it is possible for the trade sequence to skip a few numbers
*/
func (a *Client) GetPublicGetlasttrades(params *GetPublicGetlasttradesParams) (*GetPublicGetlasttradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetlasttradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetlasttrades",
		Method:             "GET",
		PathPattern:        "/public/getlasttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetlasttradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetlasttradesOK), nil

}

/*
GetPublicGetorderbook retrieves the order book along with other market values for a given instrument
*/
func (a *Client) GetPublicGetorderbook(params *GetPublicGetorderbookParams) (*GetPublicGetorderbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetorderbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetorderbook",
		Method:             "GET",
		PathPattern:        "/public/getorderbook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetorderbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGetorderbookOK), nil

}

/*
GetPublicHello methods used to introduce the client software connected to deribit platform over websocket provided data may have an impact on the maintained connection and will be collected for internal statistical purposes in response deribit will also introduce itself
*/
func (a *Client) GetPublicHello(params *GetPublicHelloParams) (*GetPublicHelloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicHelloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicHello",
		Method:             "GET",
		PathPattern:        "/public/hello",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicHelloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicHelloOK), nil

}

/*
GetPublicPing this API endpoint always responds with pong this method is primarily intended to be used as a keep alive message over websocket when used over HTTP this API endpoint could also be used to measure network delays between your software and the API server
*/
func (a *Client) GetPublicPing(params *GetPublicPingParams) (*GetPublicPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicPing",
		Method:             "GET",
		PathPattern:        "/public/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicPingOK), nil

}

/*
GetPublicSetHeartbeat signals the websocket connection to send and request heartbeats heartbeats can be used to detect stale connections when heartbeats have been set up the API server will send heartbeat messages and test request messages your software should respond to test request messages by sending a api v2 public test request if your software fails to do so the API server will immediately close the connection if your account is configured to cancel on disconnect any orders opened over the connection will be cancelled
*/
func (a *Client) GetPublicSetHeartbeat(params *GetPublicSetHeartbeatParams) (*GetPublicSetHeartbeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSetHeartbeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicSetHeartbeat",
		Method:             "GET",
		PathPattern:        "/public/set_heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicSetHeartbeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicSetHeartbeatOK), nil

}

/*
GetPublicSubscribe subscribes to one or more channels

Subscribe to one or more channels.

This is the same method as [/private/subscribe](#private_subscribe), but it can only
be used for 'public' channels.

*/
func (a *Client) GetPublicSubscribe(params *GetPublicSubscribeParams) (*GetPublicSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicSubscribe",
		Method:             "GET",
		PathPattern:        "/public/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicSubscribeOK), nil

}

/*
GetPublicTest tests the connection to the API server and returns its version you can use this to make sure the API is reachable and matches the expected version
*/
func (a *Client) GetPublicTest(params *GetPublicTestParams) (*GetPublicTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicTest",
		Method:             "GET",
		PathPattern:        "/public/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicTestOK), nil

}

/*
GetPublicTicker gets ticker for an instrument
*/
func (a *Client) GetPublicTicker(params *GetPublicTickerParams) (*GetPublicTickerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicTickerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicTicker",
		Method:             "GET",
		PathPattern:        "/public/ticker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicTickerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicTickerOK), nil

}

/*
GetPublicUnsubscribe unsubscribes from one or more channels
*/
func (a *Client) GetPublicUnsubscribe(params *GetPublicUnsubscribeParams) (*GetPublicUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicUnsubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicUnsubscribe",
		Method:             "GET",
		PathPattern:        "/public/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicUnsubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicUnsubscribeOK), nil

}

/*
GetPublicValidateField methods used to introduce the client software connected to deribit platform over websocket provided data may have an impact on the maintained connection and will be collected for internal statistical purposes in response deribit will also introduce itself
*/
func (a *Client) GetPublicValidateField(params *GetPublicValidateFieldParams) (*GetPublicValidateFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicValidateFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicValidateField",
		Method:             "GET",
		PathPattern:        "/public/validate_field",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicValidateFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicValidateFieldOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
